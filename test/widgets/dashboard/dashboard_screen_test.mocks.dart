// Mocks generated by Mockito 5.4.5 from annotations
// in blkwds_manager/test/widgets/dashboard/dashboard_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:blkwds_manager/models/booking_v2.dart' as _i6;
import 'package:blkwds_manager/models/gear.dart' as _i10;
import 'package:blkwds_manager/models/member.dart' as _i8;
import 'package:blkwds_manager/models/project.dart' as _i9;
import 'package:blkwds_manager/screens/booking_panel/booking_panel_controller.dart'
    as _i7;
import 'package:blkwds_manager/services/navigation_service.dart' as _i3;
import 'package:blkwds_manager/theme/blkwds_animations.dart' as _i5;
import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake
    implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i2.Mock implements _i3.NavigationService {
  MockNavigationService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(
            Invocation.getter(#navigatorKey),
            returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
              this,
              Invocation.getter(#navigatorKey),
            ),
          )
          as _i1.GlobalKey<_i1.NavigatorState>);

  @override
  _i4.Future<T?> navigateTo<T>(
    _i1.Widget? page, {
    _i5.BLKWDSPageTransitionType? transitionType =
        _i5.BLKWDSPageTransitionType.rightToLeft,
    bool? replace = false,
    bool? clearStack = false,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #navigateTo,
              [page],
              {
                #transitionType: transitionType,
                #replace: replace,
                #clearStack: clearStack,
                #arguments: arguments,
              },
            ),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  void goBack<T>({T? result}) => super.noSuchMethod(
    Invocation.method(#goBack, [], {#result: result}),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<T?> navigateToNamed<T>(
    String? routeName, {
    _i5.BLKWDSPageTransitionType? transitionType =
        _i5.BLKWDSPageTransitionType.rightToLeft,
    bool? replace = false,
    bool? clearStack = false,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #navigateToNamed,
              [routeName],
              {
                #transitionType: transitionType,
                #replace: replace,
                #clearStack: clearStack,
                #arguments: arguments,
              },
            ),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  bool canGoBack() =>
      (super.noSuchMethod(Invocation.method(#canGoBack, []), returnValue: false)
          as bool);

  @override
  _i4.Future<T?> navigateToDashboard<T>({bool? clearStack = true}) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToDashboard, [], {
              #clearStack: clearStack,
            }),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToBookingPanel<T>({String? filter}) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToBookingPanel, [], {#filter: filter}),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToBookingDetail<T>(
    _i6.Booking? booking,
    _i7.BookingPanelController? controller,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToBookingDetail, [booking, controller]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToBookingDetailFromList<T>(
    _i6.Booking? booking,
    _i7.BookingPanelController? controller,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToBookingDetailFromList, [
              booking,
              controller,
            ]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToCalendar<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToCalendar, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToSettings<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToSettings, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToAddGear<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToAddGear, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToMemberManagement<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToMemberManagement, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToMemberDetail<T>(_i8.Member? member) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToMemberDetail, [member]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToMemberForm<T>({_i8.Member? member}) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToMemberForm, [], {#member: member}),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToProjectManagement<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToProjectManagement, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToProjectDetail<T>(_i9.Project? project) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToProjectDetail, [project]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToProjectForm<T>({_i9.Project? project}) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToProjectForm, [], {#project: project}),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToGearManagement<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToGearManagement, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToGearDetail<T>(_i10.Gear? gear) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToGearDetail, [gear]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToGearForm<T>({_i10.Gear? gear}) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToGearForm, [], {#gear: gear}),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToStudioManagement<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToStudioManagement, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToActivityLog<T>({dynamic controller}) =>
      (super.noSuchMethod(
            Invocation.method(#navigateToActivityLog, [], {
              #controller: controller,
            }),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToAppConfig<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToAppConfig, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToAppInfo<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToAppInfo, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToDatabaseIntegrity<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToDatabaseIntegrity, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<T?> navigateToStyleDemo<T>() =>
      (super.noSuchMethod(
            Invocation.method(#navigateToStyleDemo, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);
}
